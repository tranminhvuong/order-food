name: Sync to GitHub
on:
  push:
    branches:
      - main
      - ppr
      - prd
      - develop

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref_name }}
          persist-credentials: false
          fetch-depth: 0

      - name: Get variable
        id: get_var
        run: |
          TAG_VER=$(cat customer_commit.txt |grep -w Version |awk -F": " '{print $2}')
          TAG_TITLE=$(cat customer_commit.txt | grep -w Title |awk -F": " '{print $2}')
          TAG_BODY=$(cat customer_commit.txt | grep -w Body |awk -F": " '{print $2}')
          MAIL=$(cat customer_commit.txt | grep -w Email |awk -F": " '{print $2}')
          USER=$(cat customer_commit.txt | grep -w User |awk -F": " '{print $2}')
          MESSAGE=$(cat customer_commit.txt | grep -w Commit |awk -F": " '{print $2}')
          echo ::set-output name=TAG_VER::$TAG_VER
          echo ::set-output name=TAG_TITLE::$TAG_TITLE
          echo ::set-output name=TAG_BODY::$TAG_BODY
          echo ::set-output name=MAIL::$MAIL
          echo ::set-output name=USER::$USER
          echo ::set-output name=MESSAGE::$MESSAGE

      - name: Change commit "初回登録"
        env:
          MESS: ${{ steps.get_var.outputs.MESSAGE }}
        if: ${{ env.MESS == '初回登録' }}
        run: |
          git config user.email "${{ vars.SYNC_MAIL }}"
          git config user.name "${{ vars.SYNC_USER }}"
          git checkout --orphan temp
          rm -rf .github* azure-pipelines.yml
          git rm --cached .github* azure-pipelines.yml
          git add -A
          git commit -am "初回登録"
          git branch -D ${{ github.ref_name }}
          git branch -m ${{ github.ref_name }}
          git tag ${{ steps.get_var.outputs.TAG_VER }}
          git remote remove origin
          git remote add origin https://${{ secrets.SYNC_TOKEN }}@github.com/${{ vars.SYNC_REPO }}
          git push origin ${{ github.ref_name }} -f
          git push origin ${{ steps.get_var.outputs.TAG_VER }} -f

      - name: Change commit another
        env:
          MESS: ${{ steps.get_var.outputs.MESSAGE }}
        if: ${{ env.MESS != '初回登録' }}
        run: |
          git --version
          git filter-repo --help
          HASH_COMM=`git log --oneline |grep 初回登録 |head -1 |awk {'print $1'}`
          COMMIT_DATE=`git log --oneline --pretty=fuller --format=%aD-%h |grep $HASH_COMM |head -1|cut -d- -f1`
          echo "---$HASH_COMM-----$COMMIT_DATE---"
          git config user.email "${{ vars.SYNC_MAIL }}"
          git config user.name "${{ vars.SYNC_USER }}"
          git checkout -b oldbranch $HASH_COMM
          rm -rf .github* azure-pipelines.yml
          git rm --cached .github* azure-pipelines.yml
          TREE=`git write-tree`
          COMMIT=`echo "初回登録" | git commit-tree "$TREE"`
          git checkout -b newbranch "$COMMIT"
          GIT_COMMITTER_DATE="$COMMIT_DATE" git commit --amend --no-edit --date "$COMMIT_DATE"
          git rebase --committer-date-is-author-date --onto newbranch oldbranch ${{ github.ref_name }}
          git branch -D newbranch oldbranch
          git gc
          
          echo "--------- filter-repo -----------------"
          git filter-repo -f --name-callback 'return b"${{vars.SYNC_USER}}"' --email-callback 'return b"${{vars.SYNC_MAIL}}"'
          git tag ${{ steps.get_var.outputs.TAG_VER }}
          git log
          
          git remote add neworigin https://${{ secrets.SYNC_TOKEN }}@github.com/${{ vars.SYNC_REPO }}
          git push neworigin ${{ github.ref_name }} -f
          git push neworigin ${{ steps.get_var.outputs.TAG_VER }} -f
    
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.get_var.outputs.TAG_VER }}
      #     release_name: ${{ steps.get_var.outputs.TAG_TITLE }}
      #     body: |
      #       ${{ steps.get_var.outputs.TAG_BODY }}
      #     draft: false
      #     prerelease: false
      #     force: true
